# Maintainer: mphoward
if (NOT BUILD_MD)
    message(FATAL_ERROR "MPCD package cannot be built without MD.")
endif(NOT BUILD_MD)

set(_mpcd_sources
    module.cc
    ATCollisionMethod.cc
    CellCommunicator.cc
    CellThermoCompute.cc
    CellList.cc
    CollisionMethod.cc
    Communicator.cc
    Integrator.cc
    ParticleData.cc
    ParticleDataSnapshot.cc
    Sorter.cc
    SRDCollisionMethod.cc
    StreamingMethod.cc
    SystemData.cc
    SystemDataSnapshot.cc
    )

set(_mpcd_headers
    ATCollisionMethod.h
    CellCommunicator.h
    CellThermoCompute.h
    CellList.h
    CollisionMethod.h
    Communicator.h
    CommunicatorUtilities.h
    Integrator.h
    ParticleData.h
    ParticleDataSnapshot.h
    ParticleDataUtilities.h
    Sorter.h
    SRDCollisionMethod.h
    StreamingMethod.h
    SystemData.h
    SystemDataSnapshot.h
    )

if (ENABLE_CUDA)
list(APPEND _mpcd_sources
    ATCollisionMethodGPU.cc
    CellThermoComputeGPU.cc
    CellListGPU.cc
    CommunicatorGPU.cc
    SorterGPU.cc
    SRDCollisionMethodGPU.cc
    StreamingMethodGPU.cc
    )
list(APPEND _mpcd_headers
    ATCollisionMethodGPU.cuh
    ATCollisionMethodGPU.h
    CellCommunicator.cuh
    CellThermoComputeGPU.cuh
    CellThermoComputeGPU.h
    CellListGPU.cuh
    CellListGPU.h
    CommunicatorGPU.cuh
    CommunicatorGPU.h
    ParticleData.cuh
    SorterGPU.cuh
    SorterGPU.h
    SRDCollisionMethodGPU.cuh
    SRDCollisionMethodGPU.h
    StreamingMethodGPU.cuh
    StreamingMethodGPU.h
    )
endif()

set(_mpcd_cu_sources
    ATCollisionMethodGPU.cu
    CellThermoComputeGPU.cu
    CellListGPU.cu
    CommunicatorGPU.cu
    ParticleData.cu
    SorterGPU.cu
    SRDCollisionMethodGPU.cu
    StreamingMethodGPU.cu
    )

# Need to define NO_IMPORT_ARRAY in every file but module.cc
set_source_files_properties(${_mpcd_sources} ${_mpcd_cu_sources} PROPERTIES COMPILE_DEFINITIONS NO_IMPORT_ARRAY)

if (ENABLE_CUDA)
CUDA_COMPILE(_CUDA_GENERATED_FILES ${_mpcd_cu_sources} OPTIONS ${CUDA_ADDITIONAL_OPTIONS} SHARED)
endif (ENABLE_CUDA)

add_library (_mpcd SHARED ${_mpcd_sources} ${_CUDA_GENERATED_FILES})

# link the library to its dependencies
target_link_libraries(_mpcd _hoomd _md ${HOOMD_COMMON_LIBS})

# if we are compiling with MPI support built in, set appropriate
# compiler/linker flags
if (ENABLE_MPI)
   if(MPI_COMPILE_FLAGS)
       set_target_properties(_mpcd PROPERTIES COMPILE_FLAGS "${MPI_CXX_COMPILE_FLAGS}")
   endif(MPI_COMPILE_FLAGS)
   if(MPI_LINK_FLAGS)
       set_target_properties(_mpcd PROPERTIES LINK_FLAGS "${MPI_CXX_LINK_FLAGS}")
   endif(MPI_LINK_FLAGS)
endif(ENABLE_MPI)

##################################
# change the name of the library to be a valid python module
# tweak the properties of the output to make a functional python module
set_target_properties(_mpcd PROPERTIES PREFIX "" OUTPUT_NAME "_mpcd")

# .dylib is not recognized as a python module by python on Mac OS X
if(APPLE)
    set_target_properties(_mpcd PROPERTIES SUFFIX ".so")
endif(APPLE)
fix_cudart_rpath(_mpcd)

# install the library
install(TARGETS _mpcd
        LIBRARY DESTINATION ${PYTHON_MODULE_BASE_DIR}/mpcd
        )

################ Python only modules
# copy python modules to the build directory to make it a working python package
MACRO(copy_file file)
    add_custom_command (
        OUTPUT ${file}
        DEPENDS ${file}
        POST_BUILD
        COMMAND    ${CMAKE_COMMAND}
        ARGS       -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file} ${CMAKE_CURRENT_BINARY_DIR}/${file}
        COMMENT    "Copy hoomd/mpcd/${file}"
    )
ENDMACRO(copy_file)

set(files
    __init__.py
    collide.py
    data.py
    init.py
    stream.py
    update.py
    )

install(FILES ${files}
        DESTINATION ${PYTHON_MODULE_BASE_DIR}/mpcd
       )

foreach(file ${files})
    copy_file(${file})
endforeach()

add_custom_target(copy_mpcd ALL DEPENDS ${files})

# copy python modules to the build directory to make it a working python package
MACRO(copy_header file)
    add_custom_command (
        OUTPUT ${file}
        POST_BUILD
        COMMAND    ${CMAKE_COMMAND}
        ARGS       -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file} ${CMAKE_CURRENT_BINARY_DIR}/../include/hoomd/mpcd/${file}
        COMMENT    "Copy hoomd/include/hoomd/mpcd/${file}"
    )
ENDMACRO(copy_header)

# install headers in installation target
install(FILES ${_mpcd_headers}
        DESTINATION ${PYTHON_MODULE_BASE_DIR}/include/hoomd/mpcd
       )

if (COPY_HEADERS)
# copy headers into build directory
foreach(file ${_mpcd_headers})
    copy_header(${file})
endforeach()

add_custom_target(copy_mpcd_headers ALL DEPENDS ${_mpcd_headers})
endif()

if (BUILD_TESTING)
    add_subdirectory(test-py)
endif()
add_subdirectory(test)
